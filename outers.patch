Index: src/main/java/org/intellij/plugin/mdx/lang/psi/MdxFileViewProvider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/intellij/plugin/mdx/lang/psi/MdxFileViewProvider.kt	(revision a0bbbc2764f0b8c8fba1533e511df61b1265dd51)
+++ src/main/java/org/intellij/plugin/mdx/lang/psi/MdxFileViewProvider.kt	(date 1595605381449)
@@ -3,17 +3,19 @@

 import com.intellij.lang.Language
 import com.intellij.lang.LanguageParserDefinitions
+import com.intellij.openapi.util.text.StringUtil
 import com.intellij.openapi.vfs.VirtualFile
 import com.intellij.psi.*
 import com.intellij.psi.impl.source.PsiFileImpl
 import com.intellij.psi.templateLanguages.TemplateDataElementType
+import com.intellij.psi.templateLanguages.TemplateDataModifications
 import com.intellij.psi.templateLanguages.TemplateLanguageFileViewProvider
 import com.intellij.psi.tree.IElementType
+import com.intellij.psi.tree.TokenSet
 import gnu.trove.THashSet
 import org.intellij.plugin.mdx.lang.MdxLanguage
 import org.intellij.plugins.markdown.lang.MarkdownElementType
 import org.intellij.plugins.markdown.lang.MarkdownElementTypes
-import org.intellij.plugins.markdown.lang.MarkdownLanguage
 import org.intellij.plugins.markdown.lang.MarkdownTokenTypes
 import org.intellij.plugins.markdown.lang.parser.MarkdownParserManager

@@ -40,16 +42,17 @@
         if (lang === templateDataLanguage && psiFile is PsiFileImpl) {
             val debugName = lang.displayName.toUpperCase().replace(' ', '_')
             val mdxTemplate =
-                    TemplateDataElementType("MDX_TEMPLATE_${debugName}",
-                            MdxLanguage.INSTANCE,
-                            MarkdownElementType.platformType(MdxTokenTypes.JSX_BLOCK_CONTENT),
-                            IElementType("OUTER_BLOCK", MdxLanguage.INSTANCE))
+                    templateDataElementType(debugName)
             psiFile.contentElementType = mdxTemplate
         }

         return psiFile
     }

+    private fun templateDataElementType(debugName: String): TemplateDataElementType {
+        return MdxTemplateDataElementType
+    }
+
     override fun getBaseLanguage(): Language = MdxLanguage.INSTANCE

     override fun getLanguages(): Set<Language> = myRelevantLanguages
Index: src/main/resources/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/plugin.xml	(revision a0bbbc2764f0b8c8fba1533e511df61b1265dd51)
+++ src/main/resources/META-INF/plugin.xml	(date 1595605359754)
@@ -20,6 +20,7 @@
         <lang.fileViewProviderFactory language="MDX" implementationClass="org.intellij.plugin.mdx.lang.psi.MdxFileViewProviderFactory"/>
         <lang.parserDefinition language="MDX"
                                implementationClass="org.intellij.plugin.mdx.lang.psi.MdxParserDefinition"/>
+        <outerLanguageRangePatcher language="JSX Harmony" implementationClass="org.intellij.plugin.mdx.lang.psi.MdxOuterLanguagePatcher"/>
     </extensions>

     <actions>
Index: src/main/java/org/intellij/plugin/mdx/lang/psi/MdxOuterLanguagePatcher.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/intellij/plugin/mdx/lang/psi/MdxOuterLanguagePatcher.kt	(date 1595605800396)
+++ src/main/java/org/intellij/plugin/mdx/lang/psi/MdxOuterLanguagePatcher.kt	(date 1595605800396)
@@ -0,0 +1,14 @@
+package org.intellij.plugin.mdx.lang.psi
+
+import com.intellij.psi.templateLanguages.TemplateDataElementType
+import com.intellij.psi.templateLanguages.TemplateDataElementType.OuterLanguageRangePatcher
+
+class MdxOuterLanguagePatcher: OuterLanguageRangePatcher {
+    override fun getTextForOuterLanguageInsertionRange(templateDataElementType: TemplateDataElementType, outerElementText: CharSequence): String? {
+        if (templateDataElementType == MdxTemplateDataElementType) {
+            return "\n;"
+        }
+
+        return null
+    }
+}
\ No newline at end of file
Index: src/main/java/org/intellij/plugin/mdx/lang/psi/MdxTemplateDataElementType.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/intellij/plugin/mdx/lang/psi/MdxTemplateDataElementType.kt	(date 1595605470430)
+++ src/main/java/org/intellij/plugin/mdx/lang/psi/MdxTemplateDataElementType.kt	(date 1595605470430)
@@ -0,0 +1,17 @@
+package org.intellij.plugin.mdx.lang.psi
+
+import com.intellij.psi.templateLanguages.TemplateDataElementType
+import com.intellij.psi.tree.IElementType
+import com.intellij.psi.tree.TokenSet
+import org.intellij.plugin.mdx.lang.MdxLanguage
+import org.intellij.plugins.markdown.lang.MarkdownElementType
+
+object MdxTemplateDataElementType : TemplateDataElementType("MDX_TEMPLATE_JSX",
+        MdxLanguage.INSTANCE,
+        MarkdownElementType.platformType(MdxTokenTypes.JSX_BLOCK_CONTENT),
+        IElementType("OUTER_BLOCK", MdxLanguage.INSTANCE)) {
+
+    override fun getTemplateDataInsertionTokens(): TokenSet {
+        return TokenSet.forAllMatching(IElementType.TRUE)
+    }
+}
\ No newline at end of file